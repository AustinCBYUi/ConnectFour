@inject GameState State

<HeadContent>
    <style>
        :root {
            --board-bg: yellow;
            --player1: red;
            --player2: blue;
        }
    </style>
</HeadContent>

<div class="wins">
    <p><b>Player 1 Wins:</b> @player1_rndWins</p>
    <p><b>Player 2 Wins:</b> @player2_rndWins</p>
    <p><b>Ties: </b> @ties</p>
</div>

<nav>
    @for (byte i = 0; i < 7; i++)
    {
        var col = i;
        <span title="Click to play a piece" @onclick="() => PlayPiece(col)">🔽</span>
    }
</nav>

<article>
    @winnerMessage <button style="@ResetStyle" @onclick="ResetGame">Reset the game</button>
    <br />
    <span class="alert-danger">@errorMessage</span>
    <span class="alert-info">@currentTurn</span>
</article>

<div>
    <div class="board">
        @for (var i = 0; i < 42; i++)
        {
            <span class="container">
                <span></span>
            </span>
        }
    </div>
    @for (var i = 0; i < 42; i++)
    {
        <span class="@pieces[i]"></span>
    }
</div>

@code {
    private string[] pieces = new string[42];
    private string winnerMessage = string.Empty;
    private string errorMessage = string.Empty;
    private int player1_rndWins = 0;
    private int player2_rndWins = 0;
    private int ties = 0;

    private string currentTurn => (winnerMessage == string.Empty) ? $"Player {State.PlayerTurn}'s Turn" : "";
    private string ResetStyle => (winnerMessage == string.Empty) ? "display: none;" : "";


    void ResetGame()
    {
        State.ResetBoard();
        winnerMessage = string.Empty;
        errorMessage = string.Empty;
        pieces = new string[42];
    }


    private void PlayPiece(byte col)
    {
        errorMessage = string.Empty;

        try
        {
            var player = State.PlayerTurn;
            var turn = State.CurrentTurn;
            var landingRow = State.PlayPiece(col);
            pieces[turn] = $"player{player} col{col} drop{landingRow}";
        }
        catch (ArgumentException ex)
        {
            errorMessage = ex.Message;
        }

        var winState = State.CheckForWin();
        switch (winState)
        {
            case GameState.WinState.Player1_Wins:
                player1_rndWins++;
                winnerMessage = "Player 1 Wins!";
                break;
            case GameState.WinState.Player2_Wins:
                player2_rndWins++;
                winnerMessage = "Player 2 Wins!";
                break;
            case GameState.WinState.Tie:
                ties++;
                winnerMessage = "It's a tie!";
                break;
            default:
                winnerMessage = "";
                break;
        };
    }

    protected override void OnInitialized()
    {
        State.ResetBoard();
    }
}
